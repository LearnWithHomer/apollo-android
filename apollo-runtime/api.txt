// Signature format: 3.0
package com.apollographql.apollo {

  public interface ApolloCall<T> {
    method public ApolloCall<T!> cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public void cancel();
    method public ApolloCall<T!> clone();
    method public void enqueue(ApolloCall.Callback<T!>?);
    method public com.apollographql.apollo.api.Operation operation();
    method public ApolloCall.Builder<T!> toBuilder();
  }

  public static interface ApolloCall.Builder<T> {
    method public ApolloCall<T!> build();
    method public ApolloCall.Builder<T!> cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
  }

  public abstract static class ApolloCall.Callback<T> {
    ctor public ApolloCall.Callback();
    method public void onCanceledError(ApolloCanceledException);
    method public abstract void onFailure(com.apollographql.apollo.exception.ApolloException);
    method public void onHttpError(ApolloHttpException);
    method public void onNetworkError(ApolloNetworkException);
    method public void onParseError(ApolloParseException);
    method public abstract void onResponse(com.apollographql.apollo.api.Response<T!>);
    method public void onStatusEvent(ApolloCall.StatusEvent);
  }

  public enum ApolloCall.StatusEvent {
    enum_constant public static final ApolloCall.StatusEvent COMPLETED;
    enum_constant public static final ApolloCall.StatusEvent FETCH_CACHE;
    enum_constant public static final ApolloCall.StatusEvent FETCH_NETWORK;
    enum_constant public static final ApolloCall.StatusEvent SCHEDULED;
  }

  public final class ApolloClient implements ApolloMutationCall.Factory ApolloPrefetch.Factory ApolloQueryCall.Factory ApolloSubscriptionCall.Factory {
    method public int activeCallsCount();
    method public void addOnSubscriptionManagerStateChangeListener(OnSubscriptionManagerStateChangeListener);
    method @Deprecated public com.apollographql.apollo.cache.normalized.ApolloStore! apolloStore();
    method public static ApolloClient.Builder! builder();
    method public void clearHttpCache();
    method public void clearNormalizedCache(com.apollographql.apollo.cache.normalized.ApolloStoreOperation.Callback<Boolean>);
    method public boolean clearNormalizedCache();
    method @Deprecated public com.apollographql.apollo.cache.CacheHeaders! defaultCacheHeaders();
    method public void disableSubscriptions();
    method public void enableSubscriptions();
    method public com.apollographql.apollo.cache.normalized.ApolloStore! getApolloStore();
    method public List<ApolloInterceptorFactory> getApplicationInterceptorFactories();
    method public List<ApolloInterceptor> getApplicationInterceptors();
    method public com.apollographql.apollo.interceptor.ApolloInterceptorFactory! getAutoPersistedOperationsInterceptorFactory();
    method public com.apollographql.apollo.cache.CacheHeaders! getDefaultCacheHeaders();
    method public HttpCache getHttpCache();
    method public com.apollographql.apollo.api.ScalarTypeAdapters! getScalarTypeAdapters();
    method public okhttp3.HttpUrl! getServerUrl();
    method public SubscriptionManager! getSubscriptionManager();
    method public SubscriptionManagerState! getSubscriptionManagerState();
    method public void idleCallback(IdleResourceCallback!);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloMutationCall<T!>! mutate(com.apollographql.apollo.api.Mutation<D!,T!,V!>);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloMutationCall<T!>! mutate(com.apollographql.apollo.api.Mutation<D!,T!,V!>, D);
    method public ApolloClient.Builder! newBuilder();
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloPrefetch! prefetch(com.apollographql.apollo.api.Operation<D!,T!,V!>);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloQueryCall<T!>! query(com.apollographql.apollo.api.Query<D!,T!,V!>);
    method public void removeOnSubscriptionManagerStateChangeListener(OnSubscriptionManagerStateChangeListener);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloSubscriptionCall<T!>! subscribe(com.apollographql.apollo.api.Subscription<D!,T!,V!>);
  }

  public static class ApolloClient.Builder {
    method public ApolloClient.Builder! addApplicationInterceptor(ApolloInterceptor);
    method public ApolloClient.Builder! addApplicationInterceptorFactory(com.apollographql.apollo.interceptor.ApolloInterceptorFactory);
    method public <T> ApolloClient.Builder! addCustomTypeAdapter(com.apollographql.apollo.api.ScalarType, com.apollographql.apollo.api.CustomTypeAdapter<T!>);
    method public ApolloClient! build();
    method public ApolloClient.Builder! callFactory(okhttp3.Call.Factory);
    method public ApolloClient.Builder! defaultCacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public ApolloClient.Builder! defaultHttpCachePolicy(HttpCachePolicy.Policy);
    method public ApolloClient.Builder! defaultResponseFetcher(ResponseFetcher);
    method public ApolloClient.Builder! dispatcher(Executor);
    method public ApolloClient.Builder! enableAutoPersistedQueries(boolean);
    method public ApolloClient.Builder! enableAutoPersistedSubscriptions(boolean);
    method public ApolloClient.Builder! httpCache(HttpCache);
    method public ApolloClient.Builder! logger(com.apollographql.apollo.Logger?);
    method public ApolloClient.Builder! normalizedCache(com.apollographql.apollo.cache.normalized.NormalizedCacheFactory);
    method public ApolloClient.Builder! normalizedCache(com.apollographql.apollo.cache.normalized.NormalizedCacheFactory, com.apollographql.apollo.cache.normalized.CacheKeyResolver);
    method public ApolloClient.Builder! normalizedCache(com.apollographql.apollo.cache.normalized.NormalizedCacheFactory, com.apollographql.apollo.cache.normalized.CacheKeyResolver, boolean);
    method public ApolloClient.Builder! okHttpClient(okhttp3.OkHttpClient);
    method public ApolloClient.Builder! serverUrl(okhttp3.HttpUrl);
    method public ApolloClient.Builder! serverUrl(String);
    method public ApolloClient.Builder! setAutoPersistedOperationsInterceptorFactory(com.apollographql.apollo.interceptor.ApolloInterceptorFactory?);
    method public ApolloClient.Builder! subscriptionConnectionParams(SubscriptionConnectionParams);
    method public ApolloClient.Builder! subscriptionConnectionParams(SubscriptionConnectionParamsProvider);
    method public ApolloClient.Builder! subscriptionHeartbeatTimeout(long, TimeUnit);
    method public ApolloClient.Builder! subscriptionTransportFactory(SubscriptionTransport.Factory);
    method public ApolloClient.Builder! useHttpGetMethodForPersistedQueries(boolean);
    method public ApolloClient.Builder! useHttpGetMethodForQueries(boolean);
  }

  public final class ApolloClientAwarenessInterceptor implements okhttp3.Interceptor {
    ctor public ApolloClientAwarenessInterceptor(String clientName, String clientVersion);
    method public String getClientName();
    method public String getClientVersion();
    method public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain);
  }

  public interface ApolloMutationCall<T> extends ApolloCall<T> {
    method public ApolloMutationCall<T!> cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public ApolloMutationCall<T!> clone();
    method public ApolloMutationCall<T!> refetchQueries(com.apollographql.apollo.api.OperationName!...);
    method public ApolloMutationCall<T!> refetchQueries(com.apollographql.apollo.api.Query!...);
    method public ApolloMutationCall<T!> requestHeaders(RequestHeaders);
    method public ApolloMutationCall.Builder<T!> toBuilder();
  }

  public static interface ApolloMutationCall.Builder<T> extends ApolloCall.Builder<T> {
    method public ApolloMutationCall<T!> build();
    method public ApolloMutationCall.Builder<T!> cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public ApolloMutationCall.Builder<T!> refetchQueries(List<Query>);
    method public ApolloMutationCall.Builder<T!> refetchQueryNames(List<OperationName>);
    method public ApolloMutationCall.Builder<T!> requestHeaders(RequestHeaders);
  }

  public static interface ApolloMutationCall.Factory {
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloMutationCall<T!>! mutate(com.apollographql.apollo.api.Mutation<D!,T!,V!>);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloMutationCall<T!>! mutate(com.apollographql.apollo.api.Mutation<D!,T!,V!>, D);
  }

  public interface ApolloPrefetch {
    method public void cancel();
    method public ApolloPrefetch! clone();
    method public void enqueue(ApolloPrefetch.Callback?);
    method public com.apollographql.apollo.api.Operation operation();
  }

  public abstract static class ApolloPrefetch.Callback {
    ctor public ApolloPrefetch.Callback();
    method public void onCanceledError(ApolloCanceledException);
    method public abstract void onFailure(com.apollographql.apollo.exception.ApolloException);
    method public void onHttpError(ApolloHttpException);
    method public void onNetworkError(ApolloNetworkException);
    method public abstract void onSuccess();
  }

  public static interface ApolloPrefetch.Factory {
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloPrefetch! prefetch(com.apollographql.apollo.api.Operation<D!,T!,V!>);
  }

  public interface ApolloQueryCall<T> extends ApolloCall<T> {
    method public ApolloQueryCall<T!> cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public ApolloQueryCall<T!> clone();
    method public ApolloQueryCall<T!> httpCachePolicy(HttpCachePolicy.Policy);
    method public ApolloQueryCall<T!> requestHeaders(RequestHeaders);
    method public ApolloQueryCall<T!> responseFetcher(ResponseFetcher);
    method public ApolloQueryCall.Builder<T!> toBuilder();
    method public ApolloQueryWatcher<T!> watcher();
  }

  public static interface ApolloQueryCall.Builder<T> extends ApolloCall.Builder<T> {
    method public ApolloQueryCall<T!> build();
    method public ApolloQueryCall.Builder<T!> cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public ApolloQueryCall.Builder<T!> httpCachePolicy(HttpCachePolicy.Policy);
    method public ApolloQueryCall.Builder<T!> requestHeaders(RequestHeaders);
    method public ApolloQueryCall.Builder<T!> responseFetcher(ResponseFetcher);
  }

  public static interface ApolloQueryCall.Factory {
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloQueryCall<T!>! query(com.apollographql.apollo.api.Query<D!,T!,V!>);
  }

  public interface ApolloQueryWatcher<T> {
    method public void cancel();
    method public ApolloQueryWatcher<T!> clone();
    method public ApolloQueryWatcher<T!>! enqueueAndWatch(ApolloCall.Callback<T!>?);
    method public com.apollographql.apollo.api.Operation operation();
    method public void refetch();
    method public ApolloQueryWatcher<T!> refetchResponseFetcher(ResponseFetcher);
  }

  public interface ApolloSubscriptionCall<T> {
    method public ApolloSubscriptionCall<T!> cachePolicy(ApolloSubscriptionCall.CachePolicy);
    method public ApolloSubscriptionCall<T!>! clone();
    method public void execute(ApolloSubscriptionCall.Callback<T!>);
  }

  public enum ApolloSubscriptionCall.CachePolicy {
    enum_constant public static final ApolloSubscriptionCall.CachePolicy CACHE_AND_NETWORK;
    enum_constant public static final ApolloSubscriptionCall.CachePolicy NETWORK_ONLY;
    enum_constant public static final ApolloSubscriptionCall.CachePolicy NO_CACHE;
  }

  public static interface ApolloSubscriptionCall.Callback<T> {
    method public void onCompleted();
    method public void onConnected();
    method public void onFailure(com.apollographql.apollo.exception.ApolloException);
    method public void onResponse(com.apollographql.apollo.api.Response<T!>);
    method public void onTerminated();
  }

  public static interface ApolloSubscriptionCall.Factory {
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> ApolloSubscriptionCall<T!>! subscribe(com.apollographql.apollo.api.Subscription<D!,T!,V!>);
  }

  public interface IdleResourceCallback {
    method public void onIdle();
  }

}

package com.apollographql.apollo.exception {

  public final class ApolloCanceledException extends com.apollographql.apollo.exception.ApolloException {
    ctor public ApolloCanceledException();
    ctor public ApolloCanceledException(String, Throwable);
  }

  public final class ApolloHttpException extends com.apollographql.apollo.exception.ApolloException {
    ctor public ApolloHttpException(okhttp3.Response?);
    method public int code();
    method public String message();
    method public okhttp3.Response? rawResponse();
  }

  public final class ApolloNetworkException extends com.apollographql.apollo.exception.ApolloException {
    ctor public ApolloNetworkException(String);
    ctor public ApolloNetworkException(String, Throwable);
  }

  public final class ApolloParseException extends com.apollographql.apollo.exception.ApolloException {
    ctor public ApolloParseException(String);
    ctor public ApolloParseException(String, Throwable);
  }

}

package com.apollographql.apollo.fetcher {

  public final class ApolloResponseFetchers {
    ctor public ApolloResponseFetchers();
    field public static final ResponseFetcher! CACHE_AND_NETWORK;
    field public static final ResponseFetcher! CACHE_FIRST;
    field public static final ResponseFetcher! CACHE_ONLY;
    field public static final ResponseFetcher! NETWORK_FIRST;
    field public static final ResponseFetcher! NETWORK_ONLY;
  }

  public interface ResponseFetcher {
    method public ApolloInterceptor! provideInterceptor(com.apollographql.apollo.api.internal.ApolloLogger!);
  }

}

package com.apollographql.apollo.http {

  @com.apollographql.apollo.api.ApolloExperimental public final class OkHttpExecutionContext implements com.apollographql.apollo.api.ExecutionContext.Element {
    ctor public OkHttpExecutionContext(okhttp3.Response response);
    method public com.apollographql.apollo.api.ExecutionContext.Key<?> getKey();
    method public okhttp3.Response getResponse();
    property public com.apollographql.apollo.api.ExecutionContext.Key<?> key;
    property public final okhttp3.Response response;
    field public static final com.apollographql.apollo.http.OkHttpExecutionContext.Key KEY;
    field public static final com.apollographql.apollo.http.OkHttpExecutionContext.Key Key;
  }

  public static final class OkHttpExecutionContext.Key implements com.apollographql.apollo.api.ExecutionContext.Key<com.apollographql.apollo.http.OkHttpExecutionContext> {
  }

}

package com.apollographql.apollo.interceptor {

  public class ApolloAutoPersistedOperationInterceptor implements ApolloInterceptor {
    ctor public ApolloAutoPersistedOperationInterceptor(com.apollographql.apollo.api.internal.ApolloLogger, boolean);
    method public void dispose();
    method public void interceptAsync(ApolloInterceptor.InterceptorRequest, ApolloInterceptorChain, Executor, ApolloInterceptor.CallBack);
  }

  public static class ApolloAutoPersistedOperationInterceptor.Factory implements com.apollographql.apollo.interceptor.ApolloInterceptorFactory {
    ctor public ApolloAutoPersistedOperationInterceptor.Factory(boolean, boolean, boolean);
    ctor public ApolloAutoPersistedOperationInterceptor.Factory();
    method public ApolloInterceptor? newInterceptor(com.apollographql.apollo.api.internal.ApolloLogger, com.apollographql.apollo.api.Operation<?,?,?>);
  }

  public interface ApolloInterceptor {
    method public void dispose();
    method public void interceptAsync(ApolloInterceptor.InterceptorRequest, ApolloInterceptorChain, Executor, ApolloInterceptor.CallBack);
  }

  public static interface ApolloInterceptor.CallBack {
    method public void onCompleted();
    method public void onFailure(com.apollographql.apollo.exception.ApolloException);
    method public void onFetch(ApolloInterceptor.FetchSourceType!);
    method public void onResponse(ApolloInterceptor.InterceptorResponse);
  }

  public enum ApolloInterceptor.FetchSourceType {
    enum_constant public static final ApolloInterceptor.FetchSourceType CACHE;
    enum_constant public static final ApolloInterceptor.FetchSourceType NETWORK;
  }

  public static final class ApolloInterceptor.InterceptorRequest {
    method public static ApolloInterceptor.InterceptorRequest.Builder! builder(com.apollographql.apollo.api.Operation);
    method public ApolloInterceptor.InterceptorRequest.Builder! toBuilder();
    field public final boolean autoPersistQueries;
    field public final com.apollographql.apollo.cache.CacheHeaders! cacheHeaders;
    field public final boolean fetchFromCache;
    field public final com.apollographql.apollo.api.Operation! operation;
    field public final com.homer.apollographql.apollo.api.internal.Optional<com.apollographql.apollo.api.Operation.Data!>! optimisticUpdates;
    field public final RequestHeaders! requestHeaders;
    field public final boolean sendQueryDocument;
    field public final UUID uniqueId;
    field public final boolean useHttpGetMethodForQueries;
  }

  public static final class ApolloInterceptor.InterceptorRequest.Builder {
    method public ApolloInterceptor.InterceptorRequest.Builder! autoPersistQueries(boolean);
    method public ApolloInterceptor.InterceptorRequest! build();
    method public ApolloInterceptor.InterceptorRequest.Builder! cacheHeaders(com.apollographql.apollo.cache.CacheHeaders);
    method public ApolloInterceptor.InterceptorRequest.Builder! fetchFromCache(boolean);
    method public ApolloInterceptor.InterceptorRequest.Builder! optimisticUpdates(com.apollographql.apollo.api.Operation.Data!);
    method public ApolloInterceptor.InterceptorRequest.Builder! optimisticUpdates(com.homer.apollographql.apollo.api.internal.Optional<com.apollographql.apollo.api.Operation.Data!>);
    method public ApolloInterceptor.InterceptorRequest.Builder! requestHeaders(RequestHeaders);
    method public ApolloInterceptor.InterceptorRequest.Builder! sendQueryDocument(boolean);
    method public ApolloInterceptor.InterceptorRequest.Builder! useHttpGetMethodForQueries(boolean);
  }

  public static final class ApolloInterceptor.InterceptorResponse {
    ctor public ApolloInterceptor.InterceptorResponse(okhttp3.Response!);
    ctor public ApolloInterceptor.InterceptorResponse(okhttp3.Response!, com.apollographql.apollo.api.Response!, Collection<Record>);
    field public final com.homer.apollographql.apollo.api.internal.Optional<Collection<Record>>! cacheRecords;
    field public final com.homer.apollographql.apollo.api.internal.Optional<okhttp3.Response!>! httpResponse;
    field public final com.homer.apollographql.apollo.api.internal.Optional<com.apollographql.apollo.api.Response!>! parsedResponse;
  }

  public interface ApolloInterceptorChain {
    method public void dispose();
    method public void proceedAsync(ApolloInterceptor.InterceptorRequest, Executor, ApolloInterceptor.CallBack);
  }

  public interface ApolloInterceptorFactory {
    method public ApolloInterceptor? newInterceptor(com.apollographql.apollo.api.internal.ApolloLogger logger, com.apollographql.apollo.api.Operation<?,?,?> operation);
  }

}

package com.apollographql.apollo.request {

  public final class RequestHeaders {
    method public static RequestHeaders.Builder! builder();
    method public boolean hasHeader(String);
    method public String headerValue(String);
    method public Set<String> headers();
    method public RequestHeaders.Builder! toBuilder();
    field public static final RequestHeaders! NONE;
  }

  public static final class RequestHeaders.Builder {
    ctor public RequestHeaders.Builder();
    method public RequestHeaders.Builder! addHeader(String, String);
    method public RequestHeaders.Builder! addHeaders(Map<String,String>);
    method public RequestHeaders! build();
  }

}

package com.apollographql.apollo.response {

  public final class OperationResponseParser<D extends com.apollographql.apollo.api.Operation.Data, W> {
    ctor public OperationResponseParser(com.apollographql.apollo.api.Operation<D!,W!,?>!, com.apollographql.apollo.api.internal.ResponseFieldMapper!, com.apollographql.apollo.api.ScalarTypeAdapters!);
    ctor public OperationResponseParser(com.apollographql.apollo.api.Operation<D!,W!,?>!, com.apollographql.apollo.api.internal.ResponseFieldMapper!, com.apollographql.apollo.api.ScalarTypeAdapters!, com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer<Map<String,Object>>!);
    method public com.apollographql.apollo.api.Response<W!>! parse(Map<String,Object>);
    method public com.apollographql.apollo.api.Response<W!>! parse(okio.BufferedSource!);
    method public static com.apollographql.apollo.api.Error! parseError(Map<String,Object>);
  }

}

package com.apollographql.apollo.subscription {

  public final class ApolloOperationMessageSerializer implements com.apollographql.apollo.subscription.OperationMessageSerializer {
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.apollographql.apollo.subscription.OperationServerMessage readServerMessage(okio.BufferedSource source);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void writeClientMessage(com.apollographql.apollo.subscription.OperationClientMessage message, okio.BufferedSink sink);
    field public static final com.apollographql.apollo.subscription.ApolloOperationMessageSerializer INSTANCE;
  }

  public final class AppSyncOperationMessageSerializer implements com.apollographql.apollo.subscription.OperationMessageSerializer {
    ctor public AppSyncOperationMessageSerializer(java.util.Map<java.lang.String,?> authorization);
    method public static String buildWebSocketUrl(String baseWebSocketUrl, java.util.Map<java.lang.String,?> authorization, java.util.Map<java.lang.String,?> payload = emptyMap());
    method public static String buildWebSocketUrl(String baseWebSocketUrl, java.util.Map<java.lang.String,?> authorization);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.apollographql.apollo.subscription.OperationServerMessage readServerMessage(okio.BufferedSource source);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void writeClientMessage(com.apollographql.apollo.subscription.OperationClientMessage message, okio.BufferedSink sink);
    field public static final com.apollographql.apollo.subscription.AppSyncOperationMessageSerializer.Companion Companion;
  }

  public static final class AppSyncOperationMessageSerializer.Companion {
    method public String buildWebSocketUrl(String baseWebSocketUrl, java.util.Map<java.lang.String,?> authorization, java.util.Map<java.lang.String,?> payload = emptyMap());
    method public String buildWebSocketUrl(String baseWebSocketUrl, java.util.Map<java.lang.String,?> authorization);
  }

  public interface OnSubscriptionManagerStateChangeListener {
    method public void onStateChange(SubscriptionManagerState!, SubscriptionManagerState!);
  }

  public abstract sealed class OperationClientMessage {
    method @Deprecated public final String toJsonString();
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public final void writeToJson(com.apollographql.apollo.api.internal.json.JsonWriter writer);
  }

  public static final class OperationClientMessage.Init extends com.apollographql.apollo.subscription.OperationClientMessage {
    ctor public OperationClientMessage.Init(java.util.Map<java.lang.String,?> connectionParams);
    field public static final com.apollographql.apollo.subscription.OperationClientMessage.Init.Companion Companion;
    field public final java.util.Map<java.lang.String,java.lang.Object> connectionParams;
  }

  public static final class OperationClientMessage.Init.Companion {
  }

  public static final class OperationClientMessage.Start extends com.apollographql.apollo.subscription.OperationClientMessage {
    ctor public OperationClientMessage.Start(String subscriptionId, com.apollographql.apollo.api.Subscription<?,?,?> subscription, com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters, boolean autoPersistSubscription, boolean sendSubscriptionDocument);
    field public static final com.apollographql.apollo.subscription.OperationClientMessage.Start.Companion Companion;
    field public final boolean autoPersistSubscription;
    field public final com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters;
    field public final boolean sendSubscriptionDocument;
    field public final com.apollographql.apollo.api.Subscription<?,?,?> subscription;
    field public final String subscriptionId;
  }

  public static final class OperationClientMessage.Start.Companion {
  }

  public static final class OperationClientMessage.Stop extends com.apollographql.apollo.subscription.OperationClientMessage {
    ctor public OperationClientMessage.Stop(String subscriptionId);
    field public static final com.apollographql.apollo.subscription.OperationClientMessage.Stop.Companion Companion;
    field public final String subscriptionId;
  }

  public static final class OperationClientMessage.Stop.Companion {
  }

  public static final class OperationClientMessage.Terminate extends com.apollographql.apollo.subscription.OperationClientMessage {
    ctor public OperationClientMessage.Terminate();
    field public static final com.apollographql.apollo.subscription.OperationClientMessage.Terminate.Companion Companion;
  }

  public static final class OperationClientMessage.Terminate.Companion {
  }

  public interface OperationMessageSerializer {
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.apollographql.apollo.subscription.OperationServerMessage readServerMessage(okio.BufferedSource source);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void writeClientMessage(com.apollographql.apollo.subscription.OperationClientMessage message, okio.BufferedSink sink);
  }

  public abstract sealed class OperationServerMessage {
    method @Deprecated public static final com.apollographql.apollo.subscription.OperationServerMessage fromJsonString(String json);
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.Companion Companion;
    field public static final String JSON_KEY_ID = "id";
    field public static final String JSON_KEY_PAYLOAD = "payload";
    field public static final String JSON_KEY_TYPE = "type";
  }

  public static final class OperationServerMessage.Companion {
    method @Deprecated public com.apollographql.apollo.subscription.OperationServerMessage fromJsonString(String json);
  }

  public static final class OperationServerMessage.Complete extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.Complete(String? id);
    method public boolean equals(Object? other);
    method public int hashCode();
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.Complete.Companion Companion;
    field public static final String TYPE = "complete";
    field public final String? id;
  }

  public static final class OperationServerMessage.Complete.Companion {
  }

  public static final class OperationServerMessage.ConnectionAcknowledge extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.ConnectionAcknowledge();
    method public boolean equals(Object? other);
    method public int hashCode();
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.ConnectionAcknowledge.Companion Companion;
    field public static final String TYPE = "connection_ack";
  }

  public static final class OperationServerMessage.ConnectionAcknowledge.Companion {
  }

  public static final class OperationServerMessage.ConnectionError extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.ConnectionError(java.util.Map<java.lang.String,?> payload);
    method public boolean equals(Object? other);
    method public int hashCode();
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.ConnectionError.Companion Companion;
    field public static final String TYPE = "connection_error";
    field public final java.util.Map<java.lang.String,java.lang.Object> payload;
  }

  public static final class OperationServerMessage.ConnectionError.Companion {
  }

  public static final class OperationServerMessage.ConnectionKeepAlive extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.ConnectionKeepAlive();
    method public boolean equals(Object? other);
    method public int hashCode();
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.ConnectionKeepAlive.Companion Companion;
    field public static final String TYPE = "ka";
  }

  public static final class OperationServerMessage.ConnectionKeepAlive.Companion {
  }

  public static final class OperationServerMessage.Data extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.Data(String? id, java.util.Map<java.lang.String,?> payload);
    method public boolean equals(Object? other);
    method public int hashCode();
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.Data.Companion Companion;
    field public static final String TYPE = "data";
    field public final String? id;
    field public final java.util.Map<java.lang.String,java.lang.Object> payload;
  }

  public static final class OperationServerMessage.Data.Companion {
  }

  public static final class OperationServerMessage.Error extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.Error(String? id, java.util.Map<java.lang.String,?> payload);
    method public boolean equals(Object? other);
    method public int hashCode();
    field public static final com.apollographql.apollo.subscription.OperationServerMessage.Error.Companion Companion;
    field public static final String TYPE = "error";
    field public final String? id;
    field public final java.util.Map<java.lang.String,java.lang.Object> payload;
  }

  public static final class OperationServerMessage.Error.Companion {
  }

  public static final class OperationServerMessage.Unsupported extends com.apollographql.apollo.subscription.OperationServerMessage {
    ctor public OperationServerMessage.Unsupported(String rawMessage);
    method public boolean equals(Object? other);
    method public int hashCode();
    field public final String rawMessage;
  }

  public final class SubscriptionConnectionParams {
    ctor public SubscriptionConnectionParams();
    ctor public SubscriptionConnectionParams(Map<? extends String,?>);
  }

  public interface SubscriptionConnectionParamsProvider {
    method public SubscriptionConnectionParams provide();
  }

  public static class SubscriptionConnectionParamsProvider.Const implements SubscriptionConnectionParamsProvider {
    ctor public SubscriptionConnectionParamsProvider.Const(SubscriptionConnectionParams);
    method public SubscriptionConnectionParams provide();
  }

  public enum SubscriptionManagerState {
    enum_constant public static final SubscriptionManagerState ACTIVE;
    enum_constant public static final SubscriptionManagerState CONNECTED;
    enum_constant public static final SubscriptionManagerState CONNECTING;
    enum_constant public static final SubscriptionManagerState DISCONNECTED;
    enum_constant public static final SubscriptionManagerState STOPPED;
    enum_constant public static final SubscriptionManagerState STOPPING;
  }

  public interface SubscriptionTransport {
    method public void connect();
    method public void disconnect(com.apollographql.apollo.subscription.OperationClientMessage!);
    method public void send(com.apollographql.apollo.subscription.OperationClientMessage!);
  }

  public static interface SubscriptionTransport.Callback {
    method public void onClosed();
    method public void onConnected();
    method public void onFailure(Throwable);
    method public void onMessage(com.apollographql.apollo.subscription.OperationServerMessage!);
  }

  public static interface SubscriptionTransport.Factory {
    method public SubscriptionTransport! create(SubscriptionTransport.Callback);
  }

  public final class WebSocketSubscriptionTransport implements SubscriptionTransport {
    ctor public WebSocketSubscriptionTransport(okhttp3.Request webSocketRequest, okhttp3.WebSocket.Factory webSocketConnectionFactory, SubscriptionTransport.Callback callback, com.apollographql.apollo.subscription.OperationMessageSerializer serializer);
    ctor public WebSocketSubscriptionTransport(okhttp3.Request webSocketRequest, okhttp3.WebSocket.Factory webSocketConnectionFactory, SubscriptionTransport.Callback callback);
    method public void connect();
    method public void disconnect(com.apollographql.apollo.subscription.OperationClientMessage message);
    method public void send(com.apollographql.apollo.subscription.OperationClientMessage message);
  }

  public static final class WebSocketSubscriptionTransport.Factory implements SubscriptionTransport.Factory {
    ctor public WebSocketSubscriptionTransport.Factory(String webSocketUrl, okhttp3.WebSocket.Factory webSocketConnectionFactory, com.apollographql.apollo.subscription.OperationMessageSerializer serializer);
    ctor public WebSocketSubscriptionTransport.Factory(String webSocketUrl, okhttp3.WebSocket.Factory webSocketConnectionFactory);
    method public SubscriptionTransport create(SubscriptionTransport.Callback callback);
  }

}

